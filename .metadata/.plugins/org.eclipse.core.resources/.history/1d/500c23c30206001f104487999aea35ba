package com.cts.shopping.cart.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;

import com.cts.shopping.cart.constants.Constants.ResponseStatus;
import com.cts.shopping.cart.exception.UserAlreadyExistException;
import com.cts.shopping.cart.model.UsersDetails;
import com.cts.shopping.cart.repository.UsersRepo;
import com.cts.shopping.cart.response.RegistrationResponse;

@Service
public class AuthServiceImpl implements AuthService, UserDetailsService {

	@Autowired
	private UsersRepo userRepo;

	@Override
	public ResponseEntity<Object> registerUser(UsersDetails user) throws Exception {
		if (this.userRepo.existsByUsername(user.getUsername())) {
			throw new UserAlreadyExistException("User Already Exist: " + user.getUsername());
		} else {		
			try {
				UsersDetails users=userRepo.save(user);
				return new ResponseEntity<Object>(new RegistrationResponse(users.getUsername(), ResponseStatus.Success),
						HttpStatus.ACCEPTED);
			} catch (Exception e) {
				return new ResponseEntity<Object>(new RegistrationResponse(ResponseStatus.Failure),
						HttpStatus.INTERNAL_SERVER_ERROR);
			}
		}
	}

	@Override
	public boolean existByUsername(String username) {
		return userRepo.existsByUsername(username);
	}

	@Override
	public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {

		UsersDetails user = userRepo.findByUsername(username);

		if (user == null) {
			throw new UsernameNotFoundException("User not found for email: " + username);
		}
		return new org.springframework.security.core.userdetails.User(user.getUsername(), user.getPassword(), null);
	}

}
